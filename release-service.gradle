import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'maven'
apply plugin: 'maven-publish'

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    getArchiveClassifier().set('sources')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    getArchiveClassifier().set('javadoc')
}

javadoc {
    failOnError = false
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def pomConfig = {
    licenses {
        license {
            name = "The Apache Software License, Version 2.0"
            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution = "repo"
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId 'com.epam.reportportal'
            artifactId "$project.name"

            pom.withXml {
                def root = asNode()
                root.children().last() + pomConfig
            }
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['mavenJava']
    publish = true
    pkg {
        repo = 'reportportal'
        name = "$project.name"
        desc = "$project.description"
        websiteUrl = 'https://reportportal.github.io/'
        issueTrackerUrl = "https://github.com/reportportal/$project.name/issues"
        vcsUrl = "https://github.com/reportportal/$project.name"
        githubRepo = "reportportal/$project.name"
        githubReleaseNotesFile = 'CHANGELOG.md'

        userOrg = 'epam'
        licenses = ['Apache-2.0']
    }
}

task releaseDockerfile(type: Copy) {
    /* copy dockerfile and replace version of JAR */
    from('docker/Dockerfile-release')

    filter(ReplaceTokens, tokens: project.properties.findAll { it.value instanceof String }.collectEntries {
        [it.key, it.value]
    })

    into "${project.projectDir}/"
    rename('Dockerfile-release', 'Dockerfile')
}

task addDockerfileToGit {
    doLast {
        grgit = grgit.open(dir: '.')
        grgit.add(patterns: ['Dockerfile'])
    }
}

task removeDockerfileFromGit {
    doLast {
        grgit = grgit.open(dir: '.')
        grgit.remove(patterns: ['Dockerfile'])
    }
}

addDockerfileToGit.dependsOn releaseDockerfile
updateVersion.dependsOn removeDockerfileFromGit
beforeReleaseBuild.dependsOn addDockerfileToGit
afterReleaseBuild.dependsOn bintrayUpload